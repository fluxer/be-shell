#!/bin/sh

USER=`whoami`
mkdir -p "/tmp/${USER}/be.shell/"
FIFO_FILE="/tmp/${USER}/be.shell/${FIFO}"
LOCK_FILE="${FIFO_FILE}.lock"


# DAEMONIZE ---------------------------------

case "$1" in
  start)
    if [ ! -e "$LOCK_FILE" ]; then
        # NOTICE: setsid is required, because *some* distribution with a weird ... upstart ...
        # mechanism keeps the *entire session* under a user init process, thus in a common PGID by default
        setsid nohup $0 "daemon" >/dev/null 2>&1  &
        echo $! > "$LOCK_FILE"
    fi
    exit
    ;;
  stop)
    if [ -e "$LOCK_FILE" ]; then
        pid=$(cat "$LOCK_FILE")
        pid="${pid// }"
        if [ -z "$pid" ]; then
            echo "Error: could not read daemon PID from $LOCK_FILE"
        else
            pgid=`ps --pid $pid -o "%r" --no-headers`
            pgid="${pgid// }"
            echo "Trying to kill PID: $pid and group: $pgid"
            kill $pid
            # above could fail. That's not a problem per se, but kill the entire group to be sure
            kill -TERM -${pgid}
        fi
    fi
    exit
    ;;
  daemon)
    ;;
  *)
    echo -e "\nUsage:\n------\n   $0 start|stop\n"
    exit
esac

trap 'rm "$LOCK_FILE"; trap - INT TERM EXIT;' INT TERM EXIT

if [ ! -p "$FIFO_FILE" ]; then
    rm "$FIFO_FILE"
    mkfifo "$FIFO_FILE"
fi

while true; do
    daemon_func
done

rm "$LOCK_FILE"
trap - INT TERM EXIT